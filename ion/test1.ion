@foreign
func printf(fmt: char*, ...): int {}

@foreign
func puts(fmt: char*): int {}

@foreign
func getchar(): int {}

var c: char = 1
var uc: uchar = 1
var sc: schar = 1

const N = (:char)42 + 8 != 0

typedef A = int[1 + 2*sizeof(h())]

func h(): uchar
{
    Vector{x = 1, y = 2}.x = 42;
    p := &int{0};
    x := uint{1} + long{2};
    y := +c;
    return x;
}

func g(u: U): int {
    return u.i;
}

func k(vp: void*, ip: int*)
{
    vp = ip;
    ip = vp;
}

func f1()
{
    p := &int{0};
    *p = 42;
}

typedef U = IntOrPtr

func example_test(): int {
    return fact_rec(10) == fact_iter(10);
}

union IntOrPtr {
    i: int;
    p: int*;
}

var escape_to_char: int[256] = {
    ['n'] = '\n',
    ['r'] = '\r',
    ['t'] = '\t',
    ['v'] = '\v',
    ['b'] = '\b',
    ['a'] = '\a',
    ['0'] = 0,
}

var array: int[] = {1, 2, 3, [10]=4}

func is_even(digit: int): int {
    b := 0;
    switch (digit) {
        case 0, 2, 4, 6, 8:
            b = 1;
    }
    return b;
}

// func f() {
//     u1 := IntOrPtr{i = 42};
//     u2 := IntOrPtr{p = (:int*)42};
//     u1.i = 0;
//     u2.p = (:int*)0;
// }

var i: int

struct Vector {
    x, y: int;
}

func f2(v: Vector)
{
    v = {};
}

func fact_iter(n: int): int {
    r := 1;
    for (i := 0; i <= n; i++) {
        r *= i;
    }
    return r;
}

func fact_rec(n: int): int {
    if (n == 0) {
        return 1;
    } else {
        return n * fact_rec(n-1);
    }
}

const n = 1 + sizeof(p)

var p: T*

struct T {
    a: int[n];
}

func benchmark(n: int) {
    r := 1;
    for (i := 1; i <= n; i++) {
        r *= i;
    }
}

func va_test(x: int, ...): int
{
    return 0;
}

typedef F = func(int, ...): int

func test_ops()
{
    pi := 3.14;
    f := 0.0;
    f = +pi;
    f = -pi;
    n := -1;
    n = ~n;
    f = f * pi;
    f = pi / pi;
    n = 3 % 2;
    n = n + (:uchar)1;
    p := &n;
    p = p + 1;
    n = (p + 1) - p;
    n = n << 1;
    n = n >> 1;
    b := p + 1 > p;
    b = p + 1 >= p;
    b = p + 1 < p;
    b = p + 1 <= p;
    b = p + 1 == p;
    b = 1 > 2;
    b = 1.23 <= pi;
    n = 0xff;
    b = n & ~1;
    b = n & 1;
    b = (n & ~1) ^ 1;
    b = p && pi;
}

func main(argc: int, argv: char**): int
{
    test_ops();
    b := example_test();
    puts("Hello, world!");
    c := getchar();
    printf("You wrote '%c'\n", c);
    va_test(1);
    va_test(1, 2);
    return 0;
}
